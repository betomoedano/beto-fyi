This is a minimal expo-router app using Expo SDK 52.0.30 and Expo Router 4.0.17.

For all designs I ask you to make, have them be beautiful, not cookie cutter. Make apps that are fully featured and worthy for production.

Use stock photos from Unsplash where appropriate. Ensure that only valid and existing URLs are used. Do not download the images; instead, link directly to them using `Image` components.

# Project Structure

- All routes must be placed in the `/app` directory
- Reusable components must be placed in the `/components` directory
- Each route file must export a default React component

# Important Constraints

This project's default platform is Web, which means:

- Native-only APIs like Haptics, Local Authentication, and some Sensors are not available
- Use web-compatible alternatives or implement platform-specific code using `Platform.select()`
- Always check platform compatibility before using React Native APIs

Example of proper platform-specific code:

```typescript
import { Platform } from 'react-native';
import * as Haptics from 'expo-haptics';

const triggerFeedback = () => {
  if (Platform.OS !== 'web') {
    // Only runs on iOS/Android
    Haptics.impactAsync();
  } else {
    // Implement web alternative (e.g., visual feedback)
  }
};
```

## Expo Managed Workflow

- This project uses Expo managed workflow exclusively
- DO NOT create `ios` or `android` directories
- No native code files should be included in the project

## Navigation Architecture

### Primary Navigation: Tabs

- The app MUST use tab-based layout as the primary navigation structure
- Tab navigation is implemented using expo-router's built-in tab support
- All main sections of the app should be accessible via tabs

### Secondary Navigation

You can implement additional navigation patterns WITHIN tab screens:

- Stack Navigation: Use for hierarchical flows within a tab
- Modal Navigation: Use for overlay screens within a tab
- Drawer Navigation: Use for additional menu options within a specific tab

Example of proper navigation nesting:

```typescript
// app/(tabs)/home/_layout.tsx - Stack navigator within a tab

import { Stack } from 'expo-router/stack';

export default function HomeTabLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ title: 'Home' }} />
      <Stack.Screen name="details" options={{ title: 'Details' }} />
    </Stack>
  );
}
```

## Styling

- Use `StyleSheet.create` for all styling
- DO NOT use NativeWind or any alternative styling libraries unless explicitly asked for

## Error Handling

- Prefer showing errors directly in the UI instead of using the Alert API
- Use error states in components to display error messages inline

Example of proper error handling:

```typescript
function UserProfile() {
  const [error, setError] = useState<string | null>(null);

  return (
    <View style={styles.container}>
      {error && (
        <Text style={styles.errorText}>{error}</Text>
      )}
      {/* Rest of the component */}
    </View>
  );
}
```

## Environment Variables

- Use Expo's environment variable system
- DO NOT use Vite environment variables

### Environment Variable Types

Create a `types/env.d.ts` file in your project:

```typescript
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      EXPO_PUBLIC_API_URL: string;
      EXPO_PUBLIC_API_KEY: string;
      // Add other environment variables here
    }
  }
}

// Ensure this file is treated as a module
export {};
```

### Environment Setup

1. Create environment files for different environments:
  - `.env` - Development defaults
  - `.env.staging` - Staging environment
  - `.env.production` - Production environment

2. Example environment file structure:

```bash
EXPO_PUBLIC_API_URL=https://api.example.com
EXPO_PUBLIC_API_KEY=your_api_key
```

## Dependencies

- ALWAYS maintain ALL existing dependencies in package.json
- DO NOT remove any pre-configured dependencies

# File Management

## Removing Routes

To remove a route, use the following command in the terminal:

```bash
rm -rf "path/to/route/file"
```

# Tabs Layout in Expo Router

## File Structure Example

```
app/
├── _layout.tsx
└── (tabs)/
    ├── _layout.tsx
    ├── index.tsx
    └── settings.tsx
```

- app/_layout.tsx: Root layout with Stack navigator pointing to tabs
- app/(tabs)/_layout.tsx: Tab bar layout configuration
- app/(tabs)/index.tsx and app/(tabs)/settings.tsx: Individual tab screens

## Setting Up the Root Layout

```typescript
// app/_layout.tsx
import { Stack } from 'expo-router/stack';

export default function Layout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
    </Stack>
  );
}
```

## Configuring the Tabs Layout

```typescript
// app/(tabs)/_layout.tsx

import { Tabs } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        headerShown: false,
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ size, color }) => (
            <Ionicons name="home" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          title: 'Profile',
          tabBarIcon: ({ size, color }) => (
            <Ionicons name="person" size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}
```

## Creating Tab Screens

Each tab screen should follow this basic template:

```typescript
// app/(tabs)/index.tsx or app/(tabs)/settings.tsx

import { View, Text, StyleSheet } from 'react-native';

export default function Tab() {
  return (
    <View style={styles.container}>
      <Text>Tab Content</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

# Preferred Libraries

Use these recommended libraries for better performance and functionality:

- `react-native-reanimated` instead of `Animated` from `react-native`
  - Better performance for animations
  - More powerful animation capabilities
  
- `react-native-gesture-handler` instead of `PanResponder`
  - Native gesture handling
  - Better performance for touch interactions

Example usage:

```
import { GestureDetector } from 'react-native-gesture-handler';
import Animated from 'react-native-reanimated';

function Ball() {
  return (
    <GestureDetector>
      <Animated.View style={{}} />
    </GestureDetector>
  );
}
```
